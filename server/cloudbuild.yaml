steps:
# build docker image using Dockerfile
# using Kaniko build to cache layers for faster build ðŸ”¥ https://cloud.google.com/build/docs/optimize-builds/kaniko-cache#overview
- name: 'gcr.io/kaniko-project/executor:latest'
  args:
  - --context=${_CONTEXT} # The directory we will run docker build from
  - --destination=${_FULL_IMAGE_NAME} # Destination for finished image - in Artifacts Registry
  - --cache=true # Kaniko caches each layer of the build and reuses them as necessary
  - --cache-copy-layers=true
  - --build-arg=CLIENT_URL=${_CLIENT_URL}
# deploy new build on Cloud Run
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args: [
    'run', 'deploy', '${_IMAGE}-${_ENV}',
    '--image', '${_FULL_IMAGE_NAME}',
    '--region', '${_LOCATION}',
    '--allow-unauthenticated'
    ]

substitutions:
  _FULL_IMAGE_NAME: ${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_IMAGE}
options:
  dynamicSubstitutions: true # allows the use of variables based on other variables (like _FULL_IMAGE_NAME)
  logging: CLOUD_LOGGING_ONLY

# Variables like $_REPOSITORY are user-defined substitution variables
# These are set for the Cloud Build trigger associated with the different builds in the GCP console
# e.g. production build is _RESPOSITORY=production
# This allows us to reuse this build config for different environments
# PROJECT_ID is not user-defined