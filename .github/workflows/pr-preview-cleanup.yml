# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the "main" branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
#
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: PR Preview Cleanup

on:
  pull_request:
    types: [closed]

concurrency:
  group: actions-${{ github.ref }}
  cancel-in-progress: true

env:
  PROJECT_ID: ${{ vars.PROJECT_ID }} # TODO: update Google Cloud project id
  GAR_LOCATION: ${{ vars.GAR_LOCATION }} # TODO: update Artifact Registry location
  REGION: ${{ vars.GCR_LOCATION }} # TODO: update Cloud Run service region
  SERVICE_FORMAT: '{0}-{1}' # 0 = client or server, 1 = branch name
  IMAGE_FORMAT: '${{ vars.GAR_LOCATION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/development/{0}' # 0 is service

jobs:
  cleanup:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'
      pull-requests: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Format branch name
        env:
          name: "${{github.head_ref}}"
        run: echo "BRANCH=${name/\//-}" >> "$GITHUB_ENV"

      - name: Get client and server services
        run: |-
          echo "CLIENT_SERVICE=${{format(env.SERVICE_FORMAT, 'client', env.BRANCH)}}" >> "$GITHUB_ENV"
          echo "SERVER_SERVICE=${{format(env.SERVICE_FORMAT, 'server', env.BRANCH)}}" >> "$GITHUB_ENV"

      - name: Get client and server parameters
        run: |-
          echo "CLIENT_IMAGE=${{format(env.IMAGE_FORMAT, env.CLIENT_SERVICE)}}" >> "$GITHUB_ENV"
          echo "SERVER_IMAGE=${{format(env.IMAGE_FORMAT, env.SERVER_SERVICE)}}" >> "$GITHUB_ENV"

      - name: Checkout
        uses: actions/checkout@v4.1.1

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com
      
      - name: Set up GCP SDK
        id: sdk
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Clean up Client Artifact Registry
        run: 'bash -c "gcloud artifacts docker images delete ${{ env.CLIENT_IMAGE }} --quiet || exit 0"'

      - name: Clean up Server Artifact Registry
        run: 'bash -c "gcloud artifacts docker images delete ${{ env.SERVER_IMAGE }} --quiet || exit 0"'

      - name: Clean up Client Cloud Run service
        run: 'bash -c "gcloud run services delete ${{ env.CLIENT_SERVICE }} --region=${{ env.REGION }} --quiet || exit 0"'

      - name: Clean up Server Cloud Run service
        run: 'bash -c "gcloud run services delete ${{ env.SERVER_SERVICE }} --region=${{ env.REGION }} --quiet || exit 0"'

      - name: Remove PR comment
        run: gh pr comment "$NUMBER" --edit-last --body "$BODY"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          NUMBER: ${{ github.event.pull_request.number }}
          BODY: |-
            ### Preview Deployment

            **Your preview deployment is hosted at:**
            ~~ :sparkles: ${{ steps.deploy.outputs.url }} :sparkles: ~~
            *This preview deployment has been deleted after the PR was closed*
