# Builds and deploys branch when a PR is opened or updated with new commits
# 
# Below comments are from the original GitHub Action: https://github.com/google-github-actions/deploy-cloudrun
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
#
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: PR Preview CD

on:
  pull_request

concurrency:
  group: actions-${{ github.ref }}
  cancel-in-progress: true

env:
  PROJECT_ID: ${{ vars.PROJECT_ID }} # TODO: update Google Cloud project id
  GAR_LOCATION: ${{ vars.GAR_LOCATION }} # TODO: update Artifact Registry location
  REGION: ${{ vars.GCR_LOCATION }} # TODO: update Cloud Run service region
  SERVICE_FORMAT: {0}-{1} # 0 = client or server, 1 = branch name
  IMAGE_FORMAT: ${{ vars.GAR_LOCATION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/development/{0} # 0 is service
  URL_FORMAT: https://{0}-ijpuyqrx3a-uc.a.run.app # 0 is service name

#  CLIENT_SERVICE: client-${{ github.head_ref }}
#  CLIENT_IMAGE: ${{ vars.GAR_LOCATION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/development/client-${{ github.head_ref }}
#  CLIENT_URL: https://client-${{ github.head_ref }}-ijpuyqrx3a-uc.a.run.app
#  SERVER_SERVICE: server-${{ github.head_ref }}
#  SERVER_IMAGE: ${{ vars.GAR_LOCATION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/development/server-${{ github.head_ref }}
#  SERVER_URL: https://server-${{ github.head_ref }}-ijpuyqrx3a-uc.a.run.app


jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'
      pull-requests: 'write'

    env:
      BRANCH: ${${{github.head_ref}}//\//_}
      CLIENT_SERVICE: ${{format(SERVICE_FORMAT, 'client', BRANCH)}}
      CLIENT_IMAGE: ${{format(IMAGE_FORMAT, CLIENT_SERVICE)}}
      CLIENT_URL: ${{format(URL_FORMAT, CLIENT_SERVICE)}}
      SERVER_SERVICE: ${{format(SERVICE_FORMAT, 'server', BRANCH)}}
      SERVER_IMAGE: ${{format(IMAGE_FORMAT, SERVER_SERVICE)}}
      SERVER_URL: ${{format(URL_FORMAT, SERVER_SERVICE)}}

    runs-on: ubuntu-latest
    steps:
      - name: Check env
        run: |-
          echo "BRANCH: $BRANCH"
          echo "CLIENT_SERVICE: CLIENT_SERVICE"

      - name: Checkout
        uses: actions/checkout@v4.1.1

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # NOTE: Alternative option - authentication via credentials json
      # - name: Google Auth
      #   id: auth
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}''

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v3.1.0'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
          

      - name: Build and Push Client Container
        run: |- # Pass in url from server preview deployment to use as our API endpoint
          bash -c 'docker pull "${{env.CLIENT_IMAGE}}:latest" || exit 0'
          docker build -t "${{env.CLIENT_IMAGE}}:latest" --cache-from "${{env.CLIENT_IMAGE}}:latest" ./client --build-arg NEXT_PUBLIC_API=${{ env.SERVER_URL }}/api/v1
          docker push "${{env.CLIENT_IMAGE}}"

      - name: Build and Push Server Container
        run: |-
          bash -c 'docker pull "${{ env.SERVER_IMAGE }}:latest" || exit 0'
          docker build -t "${{ env.SERVER_IMAGE }}:latest" --cache-from "${{ env.SERVER_IMAGE }}:latest" ./server --build-arg CLIENT_URL=${{ env.CLIENT_URL }}
          docker push "${{ env.SERVER_IMAGE }}"

      - name: Deploy Client to Cloud Run
        id: deploy-client
        uses: google-github-actions/deploy-cloudrun@v2.3.0
        with:
          service: ${{ env.CLIENT_SERVICE }}
          region: ${{ env.REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.CLIENT_IMAGE }}
          flags: '--allow-unauthenticated'

      - name: Deploy Server to Cloud Run
        id: deploy-server
        uses: google-github-actions/deploy-cloudrun@v2.3.0
        with:
          service: ${{ env.SERVER_SERVICE }}
          region: ${{ env.REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.SERVER_IMAGE }}
          flags: '--allow-unauthenticated'

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: gh pr comment "$NUMBER" --edit-last --body "$BODY" || gh pr comment "$NUMBER" --body "$BODY"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          NUMBER: ${{ github.event.pull_request.number }}
          BODY: |-
            ### Preview Deployment

            **Your preview deployment is hosted at:**
            :sparkles: ${{ steps.deploy-client.outputs.url }} :sparkles:
            :sparkles: ${{ steps.deploy-server.outputs.url }} :sparkles:
